#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp P             &kp B                 &kp F                                                 &kp J        &kp L  &lt 5 U    &kp Y    &kp MINUS
&kp A             &kp R         &kp S             &kp T                 &kp G        &kp K_MUTE                &kp MINUS      &kp H        &kp N  &kp E      &kp I    &kp O
&mt LEFT_SHIFT X  &kp V         &kp D             &kp Z                 &kp C        &mo 7                     &kp SEMICOLON  &kp K        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_ALT  &kp LEFT_COMMAND  &lt_to_layer_0 3 F13  &lt 2 SPACE  &lt_to_layer_0 6 F14      &kp BACKSPACE  &lt 1 ENTER                             &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp F1  &kp F2   &kp F3   &kp F4
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp F5  &kp F6   &kp F7   &kp F8
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                            &trans
            >;
        };

        NUM {
            bindings = <
&trans     &trans  &trans  &trans  &trans                         &kp DOT       &kp NUMBER_7  &kp NUMBER_8  &kp N9        &kp NUMBER_0
&kp LSHFT  &trans  &trans  &trans  &trans  &trans      &trans     &kp PLUS      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&trans     &trans  &trans  &trans  &trans  &trans      &kp COMMA  &kp ASTERISK  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH
&trans     &trans  &trans  &trans  &trans  &trans      &trans     &trans                                                  &kp EQUAL
            >;
        };

        SIGN {
            bindings = <
&trans          &trans  &trans  &trans  &trans                        &trans         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH  &kp GRAVE
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &trans      &trans    &trans         &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SQT        &kp SEMICOLON
&trans          &trans  &trans  &trans  &trans  &trans      &kp PIPE  &kp AMPERSAND  &kp LESS_THAN         &kp GREATER_THAN       &kp EQUAL      &kp EXCLAMATION
&trans          &trans  &trans  &trans  &trans  &trans      &trans    &trans                                                                     &trans
            >;
        };

        MOUSE {
            bindings = <
&to_layer_0 Q  &to_layer_0 W  &to_layer_0 P  &to_layer_0 B  &to_layer_0 F                      &to_layer_0 J  &kp LG(LEFT_ARROW)  &mo 5              &kp LG(RIGHT)    &to_layer_0 MINUS
&to_layer_0 A  &to_layer_0 R  &to_layer_0 S  &to_layer_0 T  &to_layer_0 G  &trans      &trans  &to_layer_0 H  &mkp MB1            &mkp MB3           &mkp MB2         &to_layer_0 O
&to_layer_0 X  &to_layer_0 V  &to_layer_0 D  &to_layer_0 Z  &to_layer_0 C  &trans      &trans  &to_layer_0 K  &kp LC(TAB)         &to_layer_0 COMMA  &kp LS(LC(TAB))  &to_layer_0 SLASH
&trans         &trans         &trans         &trans         &trans         &trans      &trans  &trans                                                                 &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &trans  &trans  &trans  &trans                      &trans         &kp HOME        &kp UP_ARROW    &kp END    &trans
&kp TAB     &trans  &trans  &trans  &trans  &trans      &trans  &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp ENTER
&trans      &trans  &trans  &trans  &trans  &trans      &trans  &trans         &trans          &trans          &trans     &trans
&trans      &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                    &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        layer_7 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
